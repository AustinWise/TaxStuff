//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expression.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TaxStuff.ExpressionParsing {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ExpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, LBRACKET=3, RBRACKET=4, DOT=5, PLUS=6, MINUS=7, TIMES=8, 
		DIVIDE=9, COMMA=10, EQUAL=11, NEQUAL=12, INTEGER=13, IDENTIFIER=14, WS=15;
	public const int
		RULE_identifier = 0, RULE_simple = 1, RULE_plusMinus = 2, RULE_term = 3, 
		RULE_unary = 4, RULE_parameter_list = 5, RULE_selector = 6, RULE_functionInvoke = 7, 
		RULE_factor = 8, RULE_floatNum = 9, RULE_completeExpression = 10;
	public static readonly string[] ruleNames = {
		"identifier", "simple", "plusMinus", "term", "unary", "parameter_list", 
		"selector", "functionInvoke", "factor", "floatNum", "completeExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'['", "']'", "'.'", "'+'", "'-'", "'*'", "'/'", "','", 
		"'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "DOT", "PLUS", "MINUS", 
		"TIMES", "DIVIDE", "COMMA", "EQUAL", "NEQUAL", "INTEGER", "IDENTIFIER", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExpressionParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 0, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PlusMinusContext[] plusMinus() {
			return GetRuleContexts<PlusMinusContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlusMinusContext plusMinus(int i) {
			return GetRuleContext<PlusMinusContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(ExpressionParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(ExpressionParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEQUAL() { return GetTokens(ExpressionParser.NEQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQUAL(int i) {
			return GetToken(ExpressionParser.NEQUAL, i);
		}
		public SimpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleContext simple() {
		SimpleContext _localctx = new SimpleContext(Context, State);
		EnterRule(_localctx, 2, RULE_simple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			plusMinus();
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EQUAL || _la==NEQUAL) {
				{
				{
				State = 25;
				_la = TokenStream.LA(1);
				if ( !(_la==EQUAL || _la==NEQUAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 26;
				plusMinus();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlusMinusContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(ExpressionParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(ExpressionParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(ExpressionParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(ExpressionParser.MINUS, i);
		}
		public PlusMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plusMinus; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlusMinusContext plusMinus() {
		PlusMinusContext _localctx = new PlusMinusContext(Context, State);
		EnterRule(_localctx, 4, RULE_plusMinus);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			term();
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 33;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 34;
				term();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext[] unary() {
			return GetRuleContexts<UnaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary(int i) {
			return GetRuleContext<UnaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TIMES() { return GetTokens(ExpressionParser.TIMES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES(int i) {
			return GetToken(ExpressionParser.TIMES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIVIDE() { return GetTokens(ExpressionParser.DIVIDE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE(int i) {
			return GetToken(ExpressionParser.DIVIDE, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 6, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			unary();
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TIMES || _la==DIVIDE) {
				{
				{
				State = 41;
				_la = TokenStream.LA(1);
				if ( !(_la==TIMES || _la==DIVIDE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 42;
				unary();
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ExpressionParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 8, RULE_unary);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				Match(MINUS);
				State = 49;
				factor();
				}
				break;
			case LPAREN:
			case INTEGER:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 50;
				factor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleContext[] simple() {
			return GetRuleContexts<SimpleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleContext simple(int i) {
			return GetRuleContext<SimpleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ExpressionParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ExpressionParser.COMMA, i);
		}
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(Context, State);
		EnterRule(_localctx, 10, RULE_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			simple();
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 54;
				Match(COMMA);
				State = 55;
				simple();
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionInvokeContext functionInvoke() {
			return GetRuleContext<FunctionInvokeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ExpressionParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(ExpressionParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleContext simple() {
			return GetRuleContext<SimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(ExpressionParser.RBRACKET, 0); }
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		return selector(0);
	}

	private SelectorContext selector(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SelectorContext _localctx = new SelectorContext(Context, _parentState);
		SelectorContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_selector, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 62;
				identifier();
				}
				break;
			case 2:
				{
				State = 63;
				functionInvoke();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 76;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 74;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new SelectorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_selector);
						State = 66;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 67;
						Match(DOT);
						State = 68;
						identifier();
						}
						break;
					case 2:
						{
						_localctx = new SelectorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_selector);
						State = 69;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 70;
						Match(LBRACKET);
						State = 71;
						simple();
						State = 72;
						Match(RBRACKET);
						}
						break;
					}
					} 
				}
				State = 78;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionInvokeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ExpressionParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ExpressionParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		public FunctionInvokeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionInvoke; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionInvokeContext functionInvoke() {
		FunctionInvokeContext _localctx = new FunctionInvokeContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionInvoke);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			identifier();
			State = 80;
			Match(LPAREN);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << MINUS) | (1L << INTEGER) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 81;
				parameter_list();
				}
			}

			State = 84;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ExpressionParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleContext simple() {
			return GetRuleContext<SimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ExpressionParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FloatNumContext floatNum() {
			return GetRuleContext<FloatNumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 16, RULE_factor);
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86;
				Match(LPAREN);
				State = 87;
				simple();
				State = 88;
				Match(RPAREN);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90;
				floatNum();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 91;
				selector(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatNumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(ExpressionParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(ExpressionParser.INTEGER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ExpressionParser.DOT, 0); }
		public FloatNumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatNum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatNumContext floatNum() {
		FloatNumContext _localctx = new FloatNumContext(Context, State);
		EnterRule(_localctx, 18, RULE_floatNum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(INTEGER);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 95;
				Match(DOT);
				State = 96;
				Match(INTEGER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompleteExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleContext simple() {
			return GetRuleContext<SimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ExpressionParser.Eof, 0); }
		public CompleteExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_completeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompleteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompleteExpressionContext completeExpression() {
		CompleteExpressionContext _localctx = new CompleteExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_completeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			simple();
			State = 100;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return selector_sempred((SelectorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool selector_sempred(SelectorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', 'i', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '\x1E', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '!', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', 
		'\x4', '&', '\n', '\x4', '\f', '\x4', '\xE', '\x4', ')', '\v', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '.', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\x31', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\x36', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', ';', '\n', '\a', '\f', '\a', '\xE', '\a', '>', 
		'\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x43', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'M', '\n', '\b', 
		'\f', '\b', '\xE', '\b', 'P', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', 'U', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '_', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\x64', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x2', '\x3', '\xE', '\r', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x2', '\x5', '\x3', '\x2', '\r', '\xE', 
		'\x3', '\x2', '\b', '\t', '\x3', '\x2', '\n', '\v', '\x2', 'i', '\x2', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\"', '\x3', '\x2', '\x2', '\x2', '\b', '*', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x35', '\x3', '\x2', '\x2', '\x2', '\f', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x10', 'Q', '\x3', '\x2', '\x2', '\x2', '\x12', '^', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '`', '\x3', '\x2', '\x2', '\x2', '\x16', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x19', '\a', '\x10', '\x2', '\x2', '\x19', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1F', '\x5', '\x6', '\x4', 
		'\x2', '\x1B', '\x1C', '\t', '\x2', '\x2', '\x2', '\x1C', '\x1E', '\x5', 
		'\x6', '\x4', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', '\"', '\'', '\x5', 
		'\b', '\x5', '\x2', '#', '$', '\t', '\x3', '\x2', '\x2', '$', '&', '\x5', 
		'\b', '\x5', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '&', ')', '\x3', 
		'\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '\'', '(', 
		'\x3', '\x2', '\x2', '\x2', '(', '\a', '\x3', '\x2', '\x2', '\x2', ')', 
		'\'', '\x3', '\x2', '\x2', '\x2', '*', '/', '\x5', '\n', '\x6', '\x2', 
		'+', ',', '\t', '\x4', '\x2', '\x2', ',', '.', '\x5', '\n', '\x6', '\x2', 
		'-', '+', '\x3', '\x2', '\x2', '\x2', '.', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\t', '\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\a', '\t', '\x2', '\x2', '\x33', 
		'\x36', '\x5', '\x12', '\n', '\x2', '\x34', '\x36', '\x5', '\x12', '\n', 
		'\x2', '\x35', '\x32', '\x3', '\x2', '\x2', '\x2', '\x35', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\v', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'<', '\x5', '\x4', '\x3', '\x2', '\x38', '\x39', '\a', '\f', '\x2', '\x2', 
		'\x39', ';', '\x5', '\x4', '\x3', '\x2', ':', '\x38', '\x3', '\x2', '\x2', 
		'\x2', ';', '>', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', 
		'\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '\r', '\x3', '\x2', 
		'\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '?', '@', '\b', '\b', 
		'\x1', '\x2', '@', '\x43', '\x5', '\x2', '\x2', '\x2', '\x41', '\x43', 
		'\x5', '\x10', '\t', '\x2', '\x42', '?', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x43', 'N', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\f', '\x4', '\x2', '\x2', '\x45', '\x46', '\a', 
		'\a', '\x2', '\x2', '\x46', 'M', '\x5', '\x2', '\x2', '\x2', 'G', 'H', 
		'\f', '\x3', '\x2', '\x2', 'H', 'I', '\a', '\x5', '\x2', '\x2', 'I', 'J', 
		'\x5', '\x4', '\x3', '\x2', 'J', 'K', '\a', '\x6', '\x2', '\x2', 'K', 
		'M', '\x3', '\x2', '\x2', '\x2', 'L', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'L', 'G', '\x3', '\x2', '\x2', '\x2', 'M', 'P', '\x3', '\x2', '\x2', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 
		'O', '\xF', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\x5', '\x2', '\x2', '\x2', 'R', 'T', '\a', '\x3', '\x2', 
		'\x2', 'S', 'U', '\x5', '\f', '\a', '\x2', 'T', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\a', '\x4', '\x2', '\x2', 'W', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\a', '\x3', '\x2', '\x2', 'Y', 'Z', '\x5', '\x4', 
		'\x3', '\x2', 'Z', '[', '\a', '\x4', '\x2', '\x2', '[', '_', '\x3', '\x2', 
		'\x2', '\x2', '\\', '_', '\x5', '\x14', '\v', '\x2', ']', '_', '\x5', 
		'\xE', '\b', '\x2', '^', 'X', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', 
		'\x2', '\x2', '\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', '_', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x63', '\a', '\xF', '\x2', '\x2', '\x61', 
		'\x62', '\a', '\a', '\x2', '\x2', '\x62', '\x64', '\a', '\xF', '\x2', 
		'\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x15', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x66', '\x5', '\x4', '\x3', '\x2', '\x66', 'g', '\a', '\x2', '\x2', '\x3', 
		'g', '\x17', '\x3', '\x2', '\x2', '\x2', '\r', '\x1F', '\'', '/', '\x35', 
		'<', '\x42', 'L', 'N', 'T', '^', '\x63',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace TaxStuff.ExpressionParsing
