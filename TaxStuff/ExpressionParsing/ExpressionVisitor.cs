//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expression.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TaxStuff.ExpressionParsing {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="ExpressionParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IExpressionVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifier([NotNull] ExpressionParser.IdentifierContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.simple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSimple([NotNull] ExpressionParser.SimpleContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.plusMinus"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPlusMinus([NotNull] ExpressionParser.PlusMinusContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTerm([NotNull] ExpressionParser.TermContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.unary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnary([NotNull] ExpressionParser.UnaryContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.parameter_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParameter_list([NotNull] ExpressionParser.Parameter_listContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.selector"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSelector([NotNull] ExpressionParser.SelectorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.functionInvoke"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionInvoke([NotNull] ExpressionParser.FunctionInvokeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFactor([NotNull] ExpressionParser.FactorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.floatNum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFloatNum([NotNull] ExpressionParser.FloatNumContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.completeExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompleteExpression([NotNull] ExpressionParser.CompleteExpressionContext context);
}
} // namespace TaxStuff.ExpressionParsing
