//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expression.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TaxStuff.ExpressionParsing {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ExpressionLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, LBRACKET=3, RBRACKET=4, DOT=5, PLUS=6, MINUS=7, TIMES=8, 
		DIVIDE=9, COMMA=10, EQUAL=11, NEQUAL=12, LT=13, GT=14, LTEQ=15, GTEQ=16, 
		INTEGER=17, IDENTIFIER=18, WS=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "DOT", "PLUS", "MINUS", "TIMES", 
		"DIVIDE", "COMMA", "EQUAL", "NEQUAL", "LT", "GT", "LTEQ", "GTEQ", "INTEGER", 
		"VALID_ID_START", "VALID_ID_CHAR", "IDENTIFIER", "WS"
	};


	public ExpressionLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExpressionLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'['", "']'", "'.'", "'+'", "'-'", "'*'", "'/'", "','", 
		"'=='", "'!='", "'<'", "'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "DOT", "PLUS", "MINUS", 
		"TIMES", "DIVIDE", "COMMA", "EQUAL", "NEQUAL", "LT", "GT", "LTEQ", "GTEQ", 
		"INTEGER", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExpressionLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,19,107,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,
		0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
		1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,
		15,1,15,1,15,1,16,1,16,5,16,82,8,16,10,16,12,16,85,9,16,1,17,3,17,88,8,
		17,1,18,1,18,3,18,92,8,18,1,19,1,19,5,19,96,8,19,10,19,12,19,99,9,19,1,
		20,4,20,102,8,20,11,20,12,20,103,1,20,1,20,0,0,21,1,1,3,2,5,3,7,4,9,5,
		11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
		0,37,0,39,18,41,19,1,0,3,2,0,65,90,97,122,2,0,45,45,48,57,1,0,32,32,108,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,39,1,0,0,0,0,41,1,0,0,0,1,43,1,0,0,0,3,45,1,0,0,0,5,47,1,0,0,0,7,49,
		1,0,0,0,9,51,1,0,0,0,11,53,1,0,0,0,13,55,1,0,0,0,15,57,1,0,0,0,17,59,1,
		0,0,0,19,61,1,0,0,0,21,63,1,0,0,0,23,66,1,0,0,0,25,69,1,0,0,0,27,71,1,
		0,0,0,29,73,1,0,0,0,31,76,1,0,0,0,33,79,1,0,0,0,35,87,1,0,0,0,37,91,1,
		0,0,0,39,93,1,0,0,0,41,101,1,0,0,0,43,44,5,40,0,0,44,2,1,0,0,0,45,46,5,
		41,0,0,46,4,1,0,0,0,47,48,5,91,0,0,48,6,1,0,0,0,49,50,5,93,0,0,50,8,1,
		0,0,0,51,52,5,46,0,0,52,10,1,0,0,0,53,54,5,43,0,0,54,12,1,0,0,0,55,56,
		5,45,0,0,56,14,1,0,0,0,57,58,5,42,0,0,58,16,1,0,0,0,59,60,5,47,0,0,60,
		18,1,0,0,0,61,62,5,44,0,0,62,20,1,0,0,0,63,64,5,61,0,0,64,65,5,61,0,0,
		65,22,1,0,0,0,66,67,5,33,0,0,67,68,5,61,0,0,68,24,1,0,0,0,69,70,5,60,0,
		0,70,26,1,0,0,0,71,72,5,62,0,0,72,28,1,0,0,0,73,74,5,60,0,0,74,75,5,61,
		0,0,75,30,1,0,0,0,76,77,5,62,0,0,77,78,5,61,0,0,78,32,1,0,0,0,79,83,2,
		48,57,0,80,82,2,48,57,0,81,80,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,
		1,0,0,0,84,34,1,0,0,0,85,83,1,0,0,0,86,88,7,0,0,0,87,86,1,0,0,0,88,36,
		1,0,0,0,89,92,3,35,17,0,90,92,7,1,0,0,91,89,1,0,0,0,91,90,1,0,0,0,92,38,
		1,0,0,0,93,97,3,35,17,0,94,96,3,37,18,0,95,94,1,0,0,0,96,99,1,0,0,0,97,
		95,1,0,0,0,97,98,1,0,0,0,98,40,1,0,0,0,99,97,1,0,0,0,100,102,7,2,0,0,101,
		100,1,0,0,0,102,103,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,104,105,1,
		0,0,0,105,106,6,20,0,0,106,42,1,0,0,0,6,0,83,87,91,97,103,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace TaxStuff.ExpressionParsing
