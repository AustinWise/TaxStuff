//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expression.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TaxStuff.ExpressionParsing {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ExpressionLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, LBRACKET=3, RBRACKET=4, DOT=5, PLUS=6, MINUS=7, TIMES=8, 
		DIVIDE=9, COMMA=10, EQUAL=11, NEQUAL=12, INTEGER=13, IDENTIFIER=14, WS=15;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "DOT", "PLUS", "MINUS", "TIMES", 
		"DIVIDE", "COMMA", "EQUAL", "NEQUAL", "INTEGER", "VALID_ID_START", "VALID_ID_CHAR", 
		"IDENTIFIER", "WS"
	};


	public ExpressionLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExpressionLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'['", "']'", "'.'", "'+'", "'-'", "'*'", "'/'", "','", 
		"'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "DOT", "PLUS", "MINUS", 
		"TIMES", "DIVIDE", "COMMA", "EQUAL", "NEQUAL", "INTEGER", "IDENTIFIER", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpressionLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x11', '[', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\a', 
		'\xE', '\x42', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x45', '\v', '\xE', 
		'\x3', '\xF', '\x5', '\xF', 'H', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', 'L', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', 'P', '\n', '\x11', '\f', '\x11', '\xE', '\x11', 'S', '\v', '\x11', 
		'\x3', '\x12', '\x6', '\x12', 'V', '\n', '\x12', '\r', '\x12', '\xE', 
		'\x12', 'W', '\x3', '\x12', '\x3', '\x12', '\x2', '\x2', '\x13', '\x3', 
		'\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', 
		'\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', 
		'\xE', '\x1B', '\xF', '\x1D', '\x2', '\x1F', '\x2', '!', '\x10', '#', 
		'\x11', '\x3', '\x2', '\x5', '\x4', '\x2', '\x43', '\\', '\x63', '|', 
		'\x4', '\x2', '/', '/', '\x32', ';', '\x3', '\x2', '\"', '\"', '\x2', 
		'\\', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x3', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x5', '\'', '\x3', '\x2', '\x2', '\x2', '\a', ')', '\x3', 
		'\x2', '\x2', '\x2', '\t', '+', '\x3', '\x2', '\x2', '\x2', '\v', '-', 
		'\x3', '\x2', '\x2', '\x2', '\r', '/', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x11', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x35', '\x3', '\x2', '\x2', '\x2', '\x15', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x39', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'<', '\x3', '\x2', '\x2', '\x2', '\x1B', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x1D', 'G', '\x3', '\x2', '\x2', '\x2', '\x1F', 'K', '\x3', '\x2', '\x2', 
		'\x2', '!', 'M', '\x3', '\x2', '\x2', '\x2', '#', 'U', '\x3', '\x2', '\x2', 
		'\x2', '%', '&', '\a', '*', '\x2', '\x2', '&', '\x4', '\x3', '\x2', '\x2', 
		'\x2', '\'', '(', '\a', '+', '\x2', '\x2', '(', '\x6', '\x3', '\x2', '\x2', 
		'\x2', ')', '*', '\a', ']', '\x2', '\x2', '*', '\b', '\x3', '\x2', '\x2', 
		'\x2', '+', ',', '\a', '_', '\x2', '\x2', ',', '\n', '\x3', '\x2', '\x2', 
		'\x2', '-', '.', '\a', '\x30', '\x2', '\x2', '.', '\f', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x30', '\a', '-', '\x2', '\x2', '\x30', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x32', '\a', '/', '\x2', '\x2', '\x32', 
		'\x10', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', ',', '\x2', 
		'\x2', '\x34', '\x12', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', 
		'\x31', '\x2', '\x2', '\x36', '\x14', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\a', '.', '\x2', '\x2', '\x38', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\a', '?', '\x2', '\x2', ':', ';', '\a', '?', '\x2', 
		'\x2', ';', '\x18', '\x3', '\x2', '\x2', '\x2', '<', '=', '\a', '#', '\x2', 
		'\x2', '=', '>', '\a', '?', '\x2', '\x2', '>', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '?', '\x43', '\x4', '\x32', ';', '\x2', '@', '\x42', '\x4', '\x32', 
		';', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\t', 
		'\x2', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'L', '\x5', '\x1D', '\xF', '\x2', 'J', 
		'L', '\t', '\x3', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 
		'K', 'J', '\x3', '\x2', '\x2', '\x2', 'L', ' ', '\x3', '\x2', '\x2', '\x2', 
		'M', 'Q', '\x5', '\x1D', '\xF', '\x2', 'N', 'P', '\x5', '\x1F', '\x10', 
		'\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'R', '\"', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'V', '\t', '\x4', '\x2', '\x2', 'U', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'Z', '\b', '\x12', '\x2', '\x2', 'Z', '$', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x2', '\x43', 'G', 'K', 'Q', 'W', '\x3', '\b', '\x2', 
		'\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace TaxStuff.ExpressionParsing
