//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expression.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TaxStuff.ExpressionParsing {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class ExpressionLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, LBRACKET=3, RBRACKET=4, DOT=5, PLUS=6, MINUS=7, TIMES=8, 
		DIVIDE=9, COMMA=10, EQUAL=11, NEQUAL=12, INTEGER=13, IDENTIFIER=14, WS=15;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "DOT", "PLUS", "MINUS", "TIMES", 
		"DIVIDE", "COMMA", "EQUAL", "NEQUAL", "INTEGER", "VALID_ID_START", "VALID_ID_CHAR", 
		"IDENTIFIER", "WS"
	};


	public ExpressionLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExpressionLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'['", "']'", "'.'", "'+'", "'-'", "'*'", "'/'", "','", 
		"'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "DOT", "PLUS", "MINUS", 
		"TIMES", "DIVIDE", "COMMA", "EQUAL", "NEQUAL", "INTEGER", "IDENTIFIER", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExpressionLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,15,89,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
		14,2,15,7,15,2,16,7,16,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,
		1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,
		5,12,64,8,12,10,12,12,12,67,9,12,1,13,3,13,70,8,13,1,14,1,14,3,14,74,8,
		14,1,15,1,15,5,15,78,8,15,10,15,12,15,81,9,15,1,16,4,16,84,8,16,11,16,
		12,16,85,1,16,1,16,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,0,29,0,31,14,33,15,1,0,3,2,0,65,90,97,122,2,0,45,
		45,48,57,1,0,32,32,90,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
		0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
		0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
		1,35,1,0,0,0,3,37,1,0,0,0,5,39,1,0,0,0,7,41,1,0,0,0,9,43,1,0,0,0,11,45,
		1,0,0,0,13,47,1,0,0,0,15,49,1,0,0,0,17,51,1,0,0,0,19,53,1,0,0,0,21,55,
		1,0,0,0,23,58,1,0,0,0,25,61,1,0,0,0,27,69,1,0,0,0,29,73,1,0,0,0,31,75,
		1,0,0,0,33,83,1,0,0,0,35,36,5,40,0,0,36,2,1,0,0,0,37,38,5,41,0,0,38,4,
		1,0,0,0,39,40,5,91,0,0,40,6,1,0,0,0,41,42,5,93,0,0,42,8,1,0,0,0,43,44,
		5,46,0,0,44,10,1,0,0,0,45,46,5,43,0,0,46,12,1,0,0,0,47,48,5,45,0,0,48,
		14,1,0,0,0,49,50,5,42,0,0,50,16,1,0,0,0,51,52,5,47,0,0,52,18,1,0,0,0,53,
		54,5,44,0,0,54,20,1,0,0,0,55,56,5,61,0,0,56,57,5,61,0,0,57,22,1,0,0,0,
		58,59,5,33,0,0,59,60,5,61,0,0,60,24,1,0,0,0,61,65,2,48,57,0,62,64,2,48,
		57,0,63,62,1,0,0,0,64,67,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,26,1,0,
		0,0,67,65,1,0,0,0,68,70,7,0,0,0,69,68,1,0,0,0,70,28,1,0,0,0,71,74,3,27,
		13,0,72,74,7,1,0,0,73,71,1,0,0,0,73,72,1,0,0,0,74,30,1,0,0,0,75,79,3,27,
		13,0,76,78,3,29,14,0,77,76,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,79,80,1,
		0,0,0,80,32,1,0,0,0,81,79,1,0,0,0,82,84,7,2,0,0,83,82,1,0,0,0,84,85,1,
		0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,87,1,0,0,0,87,88,6,16,0,0,88,34,1,
		0,0,0,6,0,65,69,73,79,85,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace TaxStuff.ExpressionParsing
