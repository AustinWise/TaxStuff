//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expression.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TaxTest.ExpressionParsing {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ExpressionParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public interface IExpressionListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] ExpressionParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] ExpressionParser.IdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionParser.simple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimple([NotNull] ExpressionParser.SimpleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionParser.simple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimple([NotNull] ExpressionParser.SimpleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerm([NotNull] ExpressionParser.TermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerm([NotNull] ExpressionParser.TermContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionParser.unary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnary([NotNull] ExpressionParser.UnaryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionParser.unary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnary([NotNull] ExpressionParser.UnaryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactor([NotNull] ExpressionParser.FactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactor([NotNull] ExpressionParser.FactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionParser.float_num"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloat_num([NotNull] ExpressionParser.Float_numContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionParser.float_num"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloat_num([NotNull] ExpressionParser.Float_numContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionParser.complete_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComplete_expression([NotNull] ExpressionParser.Complete_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionParser.complete_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComplete_expression([NotNull] ExpressionParser.Complete_expressionContext context);
}
} // namespace TaxTest.ExpressionParsing
