//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expression.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TaxTest.ExpressionParsing {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ExpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, DOT=3, PLUS=4, MINUS=5, TIMES=6, DIVIDE=7, INTEGER=8, 
		IDENTIFIER=9, WS=10;
	public const int
		RULE_identifier = 0, RULE_simple = 1, RULE_term = 2, RULE_unary = 3, RULE_factor = 4, 
		RULE_float_num = 5, RULE_complete_expression = 6;
	public static readonly string[] ruleNames = {
		"identifier", "simple", "term", "unary", "factor", "float_num", "complete_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'.'", "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "DOT", "PLUS", "MINUS", "TIMES", "DIVIDE", "INTEGER", 
		"IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExpressionParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 0, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(ExpressionParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(ExpressionParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(ExpressionParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(ExpressionParser.MINUS, i);
		}
		public SimpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterSimple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitSimple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleContext simple() {
		SimpleContext _localctx = new SimpleContext(Context, State);
		EnterRule(_localctx, 2, RULE_simple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			term();
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 17;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 18;
				term();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext[] unary() {
			return GetRuleContexts<UnaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary(int i) {
			return GetRuleContext<UnaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TIMES() { return GetTokens(ExpressionParser.TIMES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES(int i) {
			return GetToken(ExpressionParser.TIMES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIVIDE() { return GetTokens(ExpressionParser.DIVIDE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE(int i) {
			return GetToken(ExpressionParser.DIVIDE, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 4, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			unary();
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TIMES || _la==DIVIDE) {
				{
				{
				State = 25;
				_la = TokenStream.LA(1);
				if ( !(_la==TIMES || _la==DIVIDE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 26;
				unary();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ExpressionParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 6, RULE_unary);
		try {
			State = 35;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32;
				Match(MINUS);
				State = 33;
				factor();
				}
				break;
			case LPAREN:
			case INTEGER:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 34;
				factor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ExpressionParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleContext simple() {
			return GetRuleContext<SimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ExpressionParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Float_numContext float_num() {
			return GetRuleContext<Float_numContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 8, RULE_factor);
		int _la;
		try {
			State = 49;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 37;
				Match(LPAREN);
				State = 38;
				simple();
				State = 39;
				Match(RPAREN);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				float_num();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 42;
				identifier();
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 43;
					Match(LPAREN);
					State = 44;
					simple();
					State = 45;
					Match(RPAREN);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Float_numContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(ExpressionParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(ExpressionParser.INTEGER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ExpressionParser.DOT, 0); }
		public Float_numContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float_num; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterFloat_num(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitFloat_num(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat_num(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Float_numContext float_num() {
		Float_numContext _localctx = new Float_numContext(Context, State);
		EnterRule(_localctx, 10, RULE_float_num);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(INTEGER);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 52;
				Match(DOT);
				State = 53;
				Match(INTEGER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Complete_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleContext simple() {
			return GetRuleContext<SimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ExpressionParser.Eof, 0); }
		public Complete_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complete_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterComplete_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitComplete_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplete_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Complete_expressionContext complete_expression() {
		Complete_expressionContext _localctx = new Complete_expressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_complete_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			simple();
			State = 57;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\f', '>', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'\x16', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x19', '\v', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x1E', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', '!', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '&', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x32', '\n', '\x6', 
		'\x5', '\x6', '\x34', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x39', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x2', '\x2', '\t', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x2', '\x4', '\x3', '\x2', '\x6', '\a', '\x3', '\x2', '\b', '\t', 
		'\x2', '=', '\x2', '\x10', '\x3', '\x2', '\x2', '\x2', '\x4', '\x12', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\b', '%', '\x3', '\x2', '\x2', '\x2', '\n', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x35', '\x3', '\x2', '\x2', '\x2', '\xE', ':', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x11', '\a', '\v', '\x2', '\x2', '\x11', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x17', '\x5', '\x6', '\x4', '\x2', 
		'\x13', '\x14', '\t', '\x2', '\x2', '\x2', '\x14', '\x16', '\x5', '\x6', 
		'\x4', '\x2', '\x15', '\x13', '\x3', '\x2', '\x2', '\x2', '\x16', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x17', '\x18', '\x3', '\x2', '\x2', '\x2', '\x18', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1F', 
		'\x5', '\b', '\x5', '\x2', '\x1B', '\x1C', '\t', '\x3', '\x2', '\x2', 
		'\x1C', '\x1E', '\x5', '\b', '\x5', '\x2', '\x1D', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '!', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\a', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\"', '#', '\a', '\a', '\x2', '\x2', '#', '&', '\x5', '\n', '\x6', '\x2', 
		'$', '&', '\x5', '\n', '\x6', '\x2', '%', '\"', '\x3', '\x2', '\x2', '\x2', 
		'%', '$', '\x3', '\x2', '\x2', '\x2', '&', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\'', '(', '\a', '\x3', '\x2', '\x2', '(', ')', '\x5', '\x4', '\x3', 
		'\x2', ')', '*', '\a', '\x4', '\x2', '\x2', '*', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '+', '\x34', '\x5', '\f', '\a', '\x2', ',', '\x31', '\x5', 
		'\x2', '\x2', '\x2', '-', '.', '\a', '\x3', '\x2', '\x2', '.', '/', '\x5', 
		'\x4', '\x3', '\x2', '/', '\x30', '\a', '\x4', '\x2', '\x2', '\x30', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '-', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\'', '\x3', '\x2', '\x2', '\x2', '\x33', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x33', ',', '\x3', '\x2', '\x2', '\x2', '\x34', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x38', '\a', '\n', '\x2', '\x2', '\x36', 
		'\x37', '\a', '\x5', '\x2', '\x2', '\x37', '\x39', '\a', '\n', '\x2', 
		'\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '\r', '\x3', '\x2', '\x2', '\x2', ':', ';', 
		'\x5', '\x4', '\x3', '\x2', ';', '<', '\a', '\x2', '\x2', '\x3', '<', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\b', '\x17', '\x1F', '%', '\x31', 
		'\x33', '\x38',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace TaxTest.ExpressionParsing
